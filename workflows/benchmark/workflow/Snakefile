"""
For CNV trees of size 3 generate trees with 1, 2, and 4 extra nodes per CNV clone with 0, 2 and 4 noise factors.
Vary the number of genes between 200 and 800 and fix the number of cells at 500.
"""
import os

configfile: "config/config.yaml"

N_EXTRAS = [0, 1, 2]
N_FACTORS = [0, 2, 4]
N_CLONES = config["n_clones"]
N_GENES = config["n_genes"]
N_CELLS = config["n_cells"]
N_REPS = config["n_reps"]
N_ITERS = config["n_iters"]
N_TRIES = config["n_tries"]
N_REGIONS = config["n_regions"]
MIN_NEVENTS = config["min_nevents"]
MAX_NEVENTS_FRAC = config["max_nevents_frac"]
FRAC_DOSAGE = config["frac_dosage"]
LOG_LIB_SIZE_MEAN = config["log_lib_size_mean"]
LOG_LIB_SIZE_STD = config["log_lib_size_std"]

METHOD_LIST = config["methods"]

DATA_PATH = f'results/data/c{N_CLONES}_g{N_GENES}_n{N_CELLS}'

rule all:
    input:
        fname = f'results/c{N_CLONES}_g{N_GENES}_n{N_CELLS}_benchmark_figure.pdf'

rule generate_data:
    params:
        seed = "{rep_id}",
        n_clones = N_CLONES,
        n_genes = N_GENES,
        n_cells = N_CELLS,
        n_extras = "{n_extras}",
        n_factors = "{n_factors}",
        n_regions = N_REGIONS,
        min_nevents = MIN_NEVENTS,
        max_nevents_frac = MAX_NEVENTS_FRAC,
        frac_dosage = FRAC_DOSAGE,
        log_lib_size_mean = LOG_LIB_SIZE_MEAN,
        log_lib_size_std = LOG_LIB_SIZE_STD,
    output:
        simulated_data = f'{DATA_PATH}/' + 'e{n_extras}_f{n_factors}/r{rep_id}_data.csv',
        simulated_labels = f'{DATA_PATH}/' + 'e{n_extras}_f{n_factors}/r{rep_id}_labels.csv',
        simulated_clones = f'{DATA_PATH}/' + 'e{n_extras}_f{n_factors}/r{rep_id}_clones.csv',
        simulated_clones_labels = f'{DATA_PATH}/' + 'e{n_extras}_f{n_factors}/r{rep_id}_obsnodes.csv',
        simulated_observed_tree = f'{DATA_PATH}/' + 'e{n_extras}_f{n_factors}/r{rep_id}_obstree.pickle',
    script:
        "scripts/generate_data.py"

rule run_method:
    params:
        n_iters = N_ITERS,
        n_tries = N_TRIES
    input:
        simulated_data = f'{DATA_PATH}/' + 'e{n_extras}_f{n_factors}/r{rep_id}_data.csv',
        simulated_clones = f'{DATA_PATH}/' + 'e{n_extras}_f{n_factors}/r{rep_id}_clones.csv',
        simulated_clones_labels = f'{DATA_PATH}/' + 'e{n_extras}_f{n_factors}/r{rep_id}_obsnodes.csv',
        simulated_observed_tree = f'{DATA_PATH}/' + 'e{n_extras}_f{n_factors}/r{rep_id}_obstree.pickle',
    output:
        fname = 'results/methods/{method}/' + f'c{N_CLONES}_g{N_GENES}_n{N_CELLS}/' + 'e{n_extras}_f{n_factors}/r{rep_id}_labels.csv'
    script:
        "scripts/{wildcards.method}.py"

rule compute_scores:
    input:
        simulated_labels = f'{DATA_PATH}/' + 'e{n_extras}_f{n_factors}/r{rep_id}_labels.csv',
        estimated_labels = 'results/methods/{method}/' + f'c{N_CLONES}_g{N_GENES}_n{N_CELLS}/' + 'e{n_extras}_f{n_factors}/r{rep_id}_labels.csv',
    output:
        fname = 'results/methods/{method}/' + f'c{N_CLONES}_g{N_GENES}_n{N_CELLS}/' + 'e{n_extras}_f{n_factors}/r{rep_id}_scores.csv',
    script:
        "scripts/compute_scores.py"

rule gather_scores:
    input:
        fname_list = expand(
            'results/methods/{method}/' + f'c{N_CLONES}_g{N_GENES}_n{N_CELLS}/' + 'e{n_extras}_f{n_factors}/r{rep_id}_scores.csv',
            method=[m for m in METHOD_LIST], n_extras=[e for e in N_EXTRAS],
            n_factors=[f for f in N_FACTORS], rep_id=[r for r in range(N_REPS)])
    output:
        fname = 'results/scores.csv'
    script:
        'scripts/gather_scores.py'

rule plot_benchmark:
    input:
        fname = 'results/scores.csv'
    output:
        ari_fname = f'results/c{N_CLONES}_g{N_GENES}_n{N_CELLS}_benchmark_figure_ari.pdf',
        acc_fname = f'results/c{N_CLONES}_g{N_GENES}_n{N_CELLS}_benchmark_figure_acc.pdf'
    script:
        "scripts/plot_benchmark.R"
